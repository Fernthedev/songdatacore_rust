name: Rust Release

on:
#   push:
#     branches: [ master ]
#   pull_request:
#     branches: [ master ]
  release:
    types:
      - created
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  


jobs:

  build:

    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        targetOS: [ubuntu-latest, windows-latest, macOS-latest, aarch64-linux-android]
        include:
          - targetOS: ubuntu-latest
            os: ubuntu-latest
            cargo-arg: ""
            file-name: "libsong_data_core_rust.so"
            lib-name: "libsong_data_core_rust.so"
            build-folder: "./target/release/"
            
          - targetOS: macOS-latest
            os: macOS-latest
            cargo-arg: ""
            file-name: "libsong_data_core_rust.dylib"
            lib-name: "libsong_data_core_rust.dylib"
            build-folder: "./target/release/"
            
          - targetOS: windows-latest
            os: windows-latest
            cargo-arg: ""
            file-name: "song_data_core_rust.dll"
            lib-name: "song_data_core_rust.dll.lib"
            build-folder: "./target/release/"
            
          - targetOS:  aarch64-linux-android
            os: ubuntu-latest
            cargo-arg: "ndk -t arm64-v8a -o target/release"
            file-name: "libsong_data_core_rust.so"
            lib-name: "libsong_data_core_rust.so"
            build-folder: "./target/release/arm64-v8a"

    steps:
    - uses: actions/checkout@v2


    
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
    
    - name: Setup NDK
      if: contains(matrix.cargo-arg, 'ndk')
      id: setup-ndk
      uses: nttld/setup-ndk@v1.0.3
      with:
        ndk-version: r22
    - name: Download Cargo NDK
      if: contains(matrix.cargo-arg, 'ndk')
      run: |
        rustup default nightly
        cargo +nightly install cargo-ndk
        rustup target add aarch64-linux-android
    - name: Create Cargo LockFile
      run: cargo +nightly update

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ matrix.targetOS }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: cargo +nightly ${{matrix.cargo-arg}} build --verbose --release
    - name: Rename and move files
      run: |
        ls ./target/release/
        ls ${{ matrix.build-folder }}
        mv "${{ matrix.build-folder }}/${{ matrix.file-name }}" "./${{ matrix.targetOS }}-${{ matrix.file-name }}"
        # Move only if exists
        [ -f ${{ matrix.build-folder }}/${{ matrix.lib-name }} ] && mv ${{ matrix.build-folder }}/${{ matrix.lib-name }} ./${{ matrix.targetOS }}-${{ matrix.lib-name }} || true
        echo Done
      shell: bash  
    - name: Run tests
      if: ${{ !contains(matrix.cargo-arg, 'ndk') }}
      run: cargo +nightly test --verbose
      
    - name: Upload to Release
      id: upload_file_release
      uses: softprops/action-gh-release@v1
# Needed?      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ./${{ matrix.targetOS }}-${{ matrix.file-name }}
          ./${{ matrix.targetOS }}-${{ matrix.lib-name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Get QPM
      if: contains(matrix.cargo-arg, 'ndk')
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: main.yml
        name: QPM-ubuntu-x64
        path: QPM
        repo: sc2ad/QuestPackageManager

    - id: release_data
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        repository: ${{ github.repository }}

    - name: Get Tag Version
      if: contains(matrix.cargo-arg, 'ndk')
      id: get_tag_version
      run: |
        echo ${GITHUB_REF#refs/tags/}
        echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}
        echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}

    - name: QPMify for NDK
      if: contains(matrix.cargo-arg, 'ndk')
      run: |
        chmod +x ./QPM/QPM
        ./QPM/QPM restore
        ./QPM/QPM package edit version "${{ steps.release_data.outputs.release }}"

        ./QPM/QPM package edit-extra "branchName" "version-${{ steps.get_tag_version.outputs.TAG }}"
        ./QPM/QPM package edit-extra "soLink" "https://github.com/${{ github.repository }}/releases/download/${{ steps.get_tag_version.outputs.TAG }}/${{ matrix.targetOS }}-${{ matrix.file-name }}"

        # Commit the change to the package, .vscode/c_cpp_properties.json, and Android.mk
        git config user.name "Github Actions"
        echo Changed git name
        git config user.email "<>"
        echo Changed git email

        git add qpm.json
        echo Added QPM.json
        git commit -m "Update Version and post restore"
        echo Comitted the json file
    - name: Get Commit ID
      if: contains(matrix.cargo-arg, 'ndk')
      id: get_commit_id
      run: |
        echo `git rev-parse HEAD`
        echo ::set-output name=ID::`git rev-parse HEAD`

    - name: Push New Commit and Tag
      if: contains(matrix.cargo-arg, 'ndk')
      run: |
        git push origin HEAD:version-${{ steps.get_tag_version.outputs.TAG }} --force
        git tag --force ${{ steps.get_tag_version.outputs.TAG }} ${{ steps.get_created_commit_id.outputs.ID }}
        git push --tags --force

    - name: QPM Publish
      if: contains(matrix.cargo-arg, 'ndk')
      run: ./QPM/QPM publish